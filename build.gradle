buildscript {
	ext {
		springBootVersion = '2.0.4.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'war'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.github.vspro'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
	maven { url "https://jitpack.io" }
	maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
	maven { url 'http://maven.oschina.net/content/groups/public/' }
	maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
	maven { url "http://maven.springframework.org/release" }
	maven { url "http://maven.restlet.org" }
	maven { url "http://mirrors.ibiblio.org/maven2" }
	maven { url 'https://maven.fabric.io/public' }
	jcenter()
	google()
}

configurations {
	mybatisGenerator
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-security')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile group: 'org.springframework.security', name: 'spring-security-taglibs', version: '5.0.7.RELEASE'
	compile('org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.2')
//	runtime('mysql:mysql-connector-java')
	compile group: 'mysql', name: 'mysql-connector-java', version: '6.0.6'
	compile('org.springframework.security:spring-security-jwt')
	compile 'org.apache.tomcat.embed:tomcat-embed-jasper'
	compile 'org.springframework.security.oauth.boot:spring-security-oauth2-autoconfigure:2.0.0.RELEASE'
	compile group: 'javax.servlet', name: 'jstl', version: '1.2'
	compile group: 'javax.servlet', name: 'javax.servlet-api', version: '3.1.0'
	compile group: 'com.alibaba', name: 'fastjson', version: '1.2.49'
	mybatisGenerator 'org.mybatis.generator:mybatis-generator-core:1.3.5'
	mybatisGenerator 'mysql:mysql-connector-java:5.1.40'
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('org.springframework.security:spring-security-test')

}


def getDbProperties = {
	def properties = new Properties()
	file("src/main/resources/generator/generator.properties").withInputStream { inputStream ->
		properties.load(inputStream)
	}
	properties
}
task mybatisGenerate << {
	def properties = getDbProperties()
	ant.properties['targetProject'] = projectDir.path
	ant.properties['driverClass'] = properties.getProperty("jdbc.driverClassName")
	ant.properties['connectionURL'] = properties.getProperty("jdbc.url")
	ant.properties['userId'] = properties.getProperty("jdbc.username")
	ant.properties['password'] = properties.getProperty("jdbc.password")
	ant.properties['src_main_java'] = sourceSets.main.java.srcDirs[0].path
	ant.properties['src_main_resources'] = sourceSets.main.resources.srcDirs[0].path
	ant.properties['modelPackage'] = properties.getProperty("package.model")
	ant.properties['mapperPackage'] = properties.getProperty("package.mapper")
	ant.properties['sqlMapperPackage'] = properties.getProperty("package.xml")
	ant.taskdef(
			name: 'mbgenerator',
			classname: 'org.mybatis.generator.ant.GeneratorAntTask',
			classpath: configurations.mybatisGenerator.asPath
	)
	ant.mbgenerator(overwrite: true,
			configfile: 'src/main/resources/generator/generatorConfig.xml', verbose: true) {
		propertyset {
			propertyref(name: 'targetProject')
			propertyref(name: 'userId')
			propertyref(name: 'driverClass')
			propertyref(name: 'connectionURL')
			propertyref(name: 'password')
			propertyref(name: 'src_main_java')
			propertyref(name: 'src_main_resources')
			propertyref(name: 'modelPackage')
			propertyref(name: 'mapperPackage')
			propertyref(name: 'sqlMapperPackage')
		}
	}
}

